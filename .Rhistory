inTabs <- "~/Dropbox (Partners HealthCare)/immune/results/ASE/immune_processed_gene_extended2.txt"
removeX <- function(DF, legitim_chrgenes){
return(DF[DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
chrgenes <- read.delim('~/Dropbox (Partners HealthCare)/replicates_ASE/data/Mus_musculus.GRCm38.68.chrgenes.txt', col.names = c('chr', 'gene'))
geneCountTab <- GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F)
head(geneCountTab)
inTabs <- "~/Dropbox (Partners HealthCare)/immune/results/ASE/immune_processed_gene_extended2.txt"
removeX <- function(DF, legitim_chrgenes){
return(DF[DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
onlyX <- function(DF, legitim_chrgenes){
return(DF[!DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
chrgenes <- read.delim('~/Dropbox (Partners HealthCare)/replicates_ASE/data/Mus_musculus.GRCm38.68.chrgenes.txt', col.names = c('chr', 'gene'))
geneCountTab_noChrX <-removeX(GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F), chrgenes)
geneCountTab_ChrX <-onlyX(GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F), chrgenes)
head(geneCountTab)
View(chrgenes)
table(chrgenes$chr)
library(readr)
immune_processed_gene_extended2 <- read_delim("~/Dropbox (Partners HealthCare)/immune/results/ASE/immune_processed_gene_extended2.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(immune_processed_gene_extended2)
table(immune_processed_gene_extended2$chr)
imm_chrX <- immune_processed_gene_extended2 %>% filter(chr == "chrX")
imm_chrX <- imm_chrX[,c(1:25)]
View(imm_chrX)
View(imm_chrX)
View(immune_processed_gene_extended2)
library(readr)
immune_merged_counts_extended2 <- read_delim("~/Dropbox (Partners HealthCare)/immune/results/ASE/immune_merged_counts_extended2.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(immune_merged_counts_extended2)
imm_chrX <- immune_merged_counts_extended2 %>% filter(chr == "chrX")
View(imm_chrX)
library(readr)
X5aza_add_merged_counts_extended2 <- read_delim("~/Dropbox (Partners HealthCare)/our_papers/5aza/data/ASE_results/5aza_add_merged_counts_extended2.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(X5aza_add_merged_counts_extended2)
aza_add_chrX <- X5aza_add_merged_counts_extended2 %>% filter(chr == "chrX")
View(aza_add_chrX)
library(readr)
pr_20180714_ISEKI_merged_counts_extended2 <- read_delim("~/Dropbox (Partners HealthCare)/our_papers/5aza/data/ASE_results/pr_20180714_ISEKI_merged_counts_extended2.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(pr_20180714_ISEKI_merged_counts_extended2)
aza_add_chrX <- pr_20180714_ISEKI_merged_counts_extended2 %>% filter(chr == "chrX")
View(aza_add_chrX)
library(readr)
pr_20180714_ISEKI_test_processed_gene_extended2 <- read_delim("~/pr_20180714_ISEKI_test_processed_gene_extended2.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(pr_20180714_ISEKI_test_processed_gene_extended2)
library(readr)
pr_20180714_ISEKI_test_merged_counts_extended2 <- read_delim("~/pr_20180714_ISEKI_test_merged_counts_extended2.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(pr_20180714_ISEKI_test_merged_counts_extended2)
library(readr)
pr_20180714_ISEKI_merged_counts_extended2 <- read_delim("~/Dropbox (Partners HealthCare)/our_papers/5aza/data/ASE_results/pr_20180714_ISEKI_merged_counts_extended2.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(pr_20180714_ISEKI_merged_counts_extended2)
View(pr_20180714_ISEKI_test_merged_counts_extended2)
View(pr_20180714_ISEKI_test_merged_counts_extended2)
View(df)
isMAE_test(0.01, 1)
isMAE_test
df$pval_sample2[df$ensembl_gene_id=="ENSMUSG00000031636"]
df$s1.1[df$ensembl_gene_id=="ENSMUSG00000031636"]
isMAE_test(4.547474e-13, 1)
isMAE_test(c(4.547474e-13, 1))
isMAE_test(c(4.547474e-13, "1"))
View(df)
class(df$H8)
experimentNames <- c("H8", "s1.1","s4.11")
techReps <- c(2,2,2)
designMatrix <- BuildDesign(experimentNames, techReps)
# Now we load we data and remove genes from X chromosome
inTabs <- "~/Dropbox (Partners HealthCare)/our_papers/5aza/data/ASE_results/5aza_add_processed_gene_extended2.txt"
removeX <- function(DF, legitim_chrgenes){
return(DF[DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
chrgenes <- read.delim('~/Dropbox (Partners HealthCare)/replicates_ASE/data/Mus_musculus.GRCm38.68.chrgenes.txt', col.names = c('chr', 'gene'))
geneCountTab <-removeX(GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F), chrgenes)
head(geneCountTab)
thr <- 10
geneCountTab_10 <- geneCountTab
nameColumns <- function(exp_n, rep_n)  {
paste0("exp", rep(exp_n, 2*rep_n), "_rep", rep(1:rep_n, each = 2), "_", rep(c("ref", "alt"), rep_n))
}
colnames(geneCountTab_10)[2:13] <- c(nameColumns(1,2), nameColumns(2,2), nameColumns(3,2))
geneCountTab_10 <- geneCountTab_10 %>% dplyr::filter(exp1_rep1_ref + exp1_rep1_alt >=thr & exp2_rep1_ref + exp2_rep1_alt >=thr &
exp3_rep1_ref + exp3_rep1_alt >=thr & exp1_rep2_ref + exp1_rep2_alt >=thr &
exp2_rep2_ref + exp2_rep2_alt >=thr & exp3_rep2_ref + exp3_rep2_alt >=thr)
geneCountTab_10 <- geneCountTab
nameColumns <- function(exp_n, rep_n)  {
paste0("exp", rep(exp_n, 2*rep_n), "_rep", rep(1:rep_n, each = 2), "_", rep(c("ref", "alt"), rep_n))
}
colnames(geneCountTab_10)[2:13] <- c(nameColumns(1,2), nameColumns(2,2), nameColumns(3,2))
g
View(geneCountTab_10)
experimentNames <- c("H8", "s1.1","s4.11")
techReps <- c(2,2,2)
designMatrix <- BuildDesign(experimentNames, techReps)
# Now we load we data and remove genes from X chromosome
inTabs <- "~/Dropbox (Partners HealthCare)/our_papers/5aza/data/ASE_results/5aza_add_processed_gene_extended2.txt"
removeX <- function(DF, legitim_chrgenes){
return(DF[DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
chrgenes <- read.delim('~/Dropbox (Partners HealthCare)/replicates_ASE/data/Mus_musculus.GRCm38.68.chrgenes.txt', col.names = c('chr', 'gene'))
geneCountTab <-removeX(GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F), chrgenes)
head(geneCountTab)
# Filter out genes with coverage lower than 10
thr <- 10
geneCountTab_10 <- geneCountTab
nameColumns <- function(exp_n, rep_n)  {
paste0("exp", rep(exp_n, 2*rep_n), "_rep", rep(1:rep_n, each = 2), "_", rep(c("ref", "alt"), rep_n))
}
colnames(geneCountTab_10)[2:13] <- c(nameColumns(1,2), nameColumns(2,2), nameColumns(3,2))
geneCountTab_10 <- geneCountTab_10 %>% dplyr::filter(exp1_rep1_ref + exp1_rep1_alt >=thr & exp2_rep1_ref + exp2_rep1_alt >=thr &
exp3_rep1_ref + exp3_rep1_alt >=thr & exp1_rep2_ref + exp1_rep2_alt >=thr &
exp2_rep2_ref + exp2_rep2_alt >=thr & exp3_rep2_ref + exp3_rep2_alt >=thr)
aiTable <- do.call(cbind, lapply(1:length(designMatrix$techReps), function(x){
round(CountsToAI(geneCountTab_10, reps = unlist(designMatrix$replicateNums[x])),3)
}))
aiTable <- cbind(geneCountTab_10$ensembl_gene_id, aiTable)
colnames(aiTable) <- c("ensembl_gene_id", designMatrix$experimentNames)
# Calculate total counts and merge tables
geneCountTab_10$exp1_ref <- geneCountTab_10$exp1_rep1_ref + geneCountTab_10$exp1_rep2_ref
geneCountTab_10$exp1_alt <- geneCountTab_10$exp1_rep1_alt + geneCountTab_10$exp1_rep2_alt
geneCountTab_10$exp2_ref <- geneCountTab_10$exp2_rep1_ref + geneCountTab_10$exp2_rep2_ref
geneCountTab_10$exp2_alt <- geneCountTab_10$exp2_rep1_alt + geneCountTab_10$exp2_rep2_alt
geneCountTab_10$exp3_ref <- geneCountTab_10$exp3_rep1_ref + geneCountTab_10$exp3_rep2_ref
geneCountTab_10$exp3_alt <- geneCountTab_10$exp3_rep1_alt + geneCountTab_10$exp3_rep2_alt
aiTable <- data.frame(aiTable)
aiTable$H8 <- as.numeric(aiTable$H8)
aiTable$s1.1 <- as.numeric(aiTable$s1.1)
aiTable$s4.11 <- as.numeric(aiTable$s4.11)
df <- merge(geneCountTab_10[,c(1,14:19)], aiTable, by.x="ensembl_gene_id", by.y="ensembl_gene_id")
# Find MAE genes
df <- df %>%
mutate(pval_sample1 = mapply(function(x, y) binom.test.p(c(x,y)), exp1_ref, exp1_alt)) %>%
mutate(pval_sample2 = mapply(function(x, y) binom.test.p(c(x,y)), exp2_ref, exp2_alt)) %>%
mutate(pval_sample3 = mapply(function(x, y) binom.test.p(c(x,y)), exp3_ref, exp3_alt)) %>%
mutate(pval_sample1_adj = p.adjust(pval_sample1, method="fdr")) %>%
mutate(pval_sample2_adj = p.adjust(pval_sample2, method="fdr")) %>%
mutate(pval_sample3_adj = p.adjust(pval_sample3, method="fdr")) %>%
mutate(isMAE_sample1 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample1, H8)) %>%
mutate(isMAE_sample2 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample2, s1.1)) %>%
mutate(isMAE_sample3 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample3, s4.11))
df <- df %>%
mutate(isMAE = mapply(function(x1,x2,x3) findMAE(c(x1,x2,x3)), isMAE_sample1, isMAE_sample2, isMAE_sample3))
View(df)
df_t <- df[,c(1, 8:10, 17:20)]
write.table(df_t, file="add_clones_test_data.txt", quote = F, row.names = F)
View(df_t)
table(df_t$isMAE)
pr_20180714_ISEKI_processed_gene_extended2 <- read.delim2("~/Dropbox (Partners HealthCare)/our_papers/5aza/data/ASE_results/pr_20180714_ISEKI_processed_gene_extended2.txt")
View(pr_20180714_ISEKI_processed_gene_extended2)
experimentNames <- c("control","DMSO","low","medium","high")
techReps <- c(2,2,2,5,2)
designMatrix <- BuildDesign(experimentNames, techReps)
inTabs <- "../../../data/5aza/pr_20180714_ISEKI_processed_gene_extended2.txt"
geneCountTab <- GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F)
head(geneCountTab)
thr <- 10
geneCountTab_10 <- geneCountTab
nameColumns <- function(exp_n, rep_n)  {
paste0("exp", rep(exp_n, 2*rep_n), "_rep", rep(1:rep_n, each = 2), "_", rep(c("ref", "alt"), rep_n))
}
colnames(geneCountTab_10)[2:27] <- c(nameColumns(1,2), nameColumns(2,2), nameColumns(3,2), nameColumns(4,5), nameColumns(5,2))
geneCountTab_10 <- geneCountTab_10 %>% dplyr::filter(exp1_rep1_ref + exp1_rep1_alt >=thr & exp2_rep1_ref + exp2_rep1_alt >=thr &
exp3_rep1_ref + exp3_rep1_alt >=thr & exp4_rep1_ref + exp4_rep1_alt >=thr &
exp5_rep1_ref + exp5_rep1_alt >=thr & exp1_rep2_ref + exp1_rep2_alt >=thr &
exp2_rep2_ref + exp2_rep2_alt >=thr & exp3_rep2_ref + exp3_rep2_alt >=thr &
exp4_rep2_ref + exp4_rep2_alt >=thr & exp5_rep2_ref + exp5_rep2_alt >=thr)
aiTable <- do.call(cbind, lapply(1:length(designMatrix$techReps), function(x){
round(CountsToAI(geneCountTab_10, reps = unlist(designMatrix$replicateNums[x])),3)
}))
aiTable <- cbind(geneCountTab_10$ensembl_gene_id, aiTable)
colnames(aiTable) <- c("ensembl_gene_id", designMatrix$experimentNames)
View(aiTable)
aiTable <- data.frame(aiTable)
class(aiTable$control)
aiTable$control <- as.numeric(aiTable$control)
aiTable$DMSO <- as.numeric(aiTable$DMSO)
aiTable$low <- as.numeric(aiTable$low)
aiTable$medium <- as.numeric(aiTable$medium)
aiTable$high <- as.numeric(aiTable$high)
df_ai <- merge(df, aiTable, by.x="ensembl_gene_id", by.y="ensembl_gene_id")
View(df_ai)
ggplot(df_ai, aes(x=control,y=s4.11)) + geom_point()
ggplot(df_ai, aes(x=control,y=s1.1)) + geom_point()
ggplot(df_ai, aes(x=control,y=H8)) + geom_point()
ggplot(df_ai, aes(x=control,y=s4.11)) + geom_point()
df_ai_1 <- df_ai %>% filter(isMAE %in% c("biallelic", "gen_sk"))
View(df_ai_1)
df_ai_1$diff <- df_ai_1$medium - df_ai_1$control
View(geneCountTab_10)
library(readr)
immune_processed_gene_extended2 <- read_delim("~/Dropbox (Partners HealthCare)/immune/results/ASE/immune_processed_gene_extended2.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(immune_processed_gene_extended2)
immune_chrX <- immune_processed_gene_extended2 %>% filter(chr == "chrX")
View(immune_chrX)
aiTable <- do.call(cbind, lapply(1:length(designMatrix$techReps), function(x){
round(CountsToAI(geneCountTab, reps = unlist(designMatrix$replicateNums[x])),3)
}))
aiTable <- cbind(geneCountTab$ensembl_gene_id, aiTable)
colnames(aiTable) <- c("ensembl_gene_id", designMatrix$experimentNames)
View(aiTable)
experimentNames <- c("sample1", "sample2","sample42", "sample43")
techReps <- c(3,3,3,3)
designMatrix <- BuildDesign(experimentNames, techReps)
# Now we load we data
inTabs <- "~/Dropbox (Partners HealthCare)/immune/results/ASE/immune_processed_gene_extended2.txt"
geneCountTab <-GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F)
head(geneCountTab)
# Calculate AI
aiTable <- do.call(cbind, lapply(1:length(designMatrix$techReps), function(x){
round(CountsToAI(geneCountTab, reps = unlist(designMatrix$replicateNums[x])),3)
}))
aiTable <- cbind(geneCountTab$ensembl_gene_id, aiTable)
colnames(aiTable) <- c("ensembl_gene_id", designMatrix$experimentNames)
View(aiTable)
View(immune_processed_gene_extended2)
imm_chr <- immune_processed_gene_extended2[,c(1,51)]
View(imm_chr)
merge(aiTable, imm_chr, by.x="ensembl_gene_id", by.y="ensembl_gene_id")
aiTable <- merge(aiTable, imm_chr, by.x="ensembl_gene_id", by.y="ensembl_gene_id")
View(aiTable)
ggplot(aiTable, aes(x=sample42)) + geom_histogram()
ggplot(aiTable, aes(x=sample42)) + geom_histogram(stat="count")
class(aiTable$sample43)
aiTable$sample1 <- as.numeric(aiTable)
aiTable$sample1 <- as.numeric(aiTable$sample1)
aiTable$sample2 <- as.numeric(aiTable$sample2)
aiTable$sample42 <- as.numeric(aiTable$sample42)
aiTable$sample43 <- as.numeric(aiTable$sample43)
ggplot(aiTable, aes(x=sample42)) + geom_histogram(stat="count")
ggplot(aiTable, aes(x=sample42)) + geom_histogram(stat="identity")
ggplot(aiTable, aes(x=sample42)) + geom_density()
ggplot(aiTable[aiTable$chr=="chrX",], aes(x=sample42)) + geom_density()
ggplot(aiTable[aiTable$chr=="chrX",], aes(x=sample43)) + geom_density()
ggplot(aiTable[aiTable$chr=="chrX",], aes(x=sample1)) + geom_density()
ggplot(aiTable[aiTable$chr=="chrX",], aes(x=sample2)) + geom_density()
aiTable_chrX <- aiTable %>% filter(chr == "chrX")
aiTable_chrX_melt <- reshape2::melt(aiTable_chrX)
View(aiTable_chrX_melt)
ggplot(aiTable[aiTable_chrX_melt, aes(x=value, col=variable)) + geom_density()
ggplot(aiTable_chrX_melt, aes(x=value, col=variable)) + geom_density()
ggplot(aiTable_chrX_melt, aes(x=value, col=variable)) +
geom_density() +
xlab("AI ratio")
g1 <- ggplot(aiTable_chrX_melt, aes(x=value, col=variable)) +
geom_density() +
xlab("AI ratio")
save_plot(g1, file="~/Dropbox (Partners HealthCare)/immune/results/plots/AI_chrX_density.pdf")
## We have 3 clones, 2 technical replicates each. First step is to build a design matrix
experimentNames <- c("H8", "s1.1","s4.11")
techReps <- c(2,2,2)
designMatrix <- BuildDesign(experimentNames, techReps)
# Now we load we data and remove genes from X chromosome
inTabs <- "~/Dropbox (Partners HealthCare)/our_papers/5aza/data/ASE_results/5aza_add_processed_gene_extended2.txt"
removeX <- function(DF, legitim_chrgenes){
return(DF[DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
chrgenes <- read.delim('~/Dropbox (Partners HealthCare)/replicates_ASE/data/Mus_musculus.GRCm38.68.chrgenes.txt', col.names = c('chr', 'gene'))
geneCountTab <-removeX(GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F), chrgenes)
head(geneCountTab)
# Filter out genes with coverage lower than 10
thr <- 10
geneCountTab_10 <- geneCountTab
nameColumns <- function(exp_n, rep_n)  {
paste0("exp", rep(exp_n, 2*rep_n), "_rep", rep(1:rep_n, each = 2), "_", rep(c("ref", "alt"), rep_n))
}
colnames(geneCountTab_10)[2:13] <- c(nameColumns(1,2), nameColumns(2,2), nameColumns(3,2))
geneCountTab_10 <- geneCountTab_10 %>% dplyr::filter(exp1_rep1_ref + exp1_rep1_alt >=thr & exp2_rep1_ref + exp2_rep1_alt >=thr &
exp3_rep1_ref + exp3_rep1_alt >=thr & exp1_rep2_ref + exp1_rep2_alt >=thr &
exp2_rep2_ref + exp2_rep2_alt >=thr & exp3_rep2_ref + exp3_rep2_alt >=thr)
# Calculate AIs for replicates
aiTable <- do.call(cbind, lapply(1:length(designMatrix$techReps), function(x){
round(CountsToAI(geneCountTab_10, reps = unlist(designMatrix$replicateNums[x])),3)
}))
aiTable <- cbind(geneCountTab_10$ensembl_gene_id, aiTable)
colnames(aiTable) <- c("ensembl_gene_id", designMatrix$experimentNames)
# Calculate total counts and merge tables
geneCountTab_10$exp1_ref <- geneCountTab_10$exp1_rep1_ref + geneCountTab_10$exp1_rep2_ref
geneCountTab_10$exp1_alt <- geneCountTab_10$exp1_rep1_alt + geneCountTab_10$exp1_rep2_alt
geneCountTab_10$exp2_ref <- geneCountTab_10$exp2_rep1_ref + geneCountTab_10$exp2_rep2_ref
geneCountTab_10$exp2_alt <- geneCountTab_10$exp2_rep1_alt + geneCountTab_10$exp2_rep2_alt
geneCountTab_10$exp3_ref <- geneCountTab_10$exp3_rep1_ref + geneCountTab_10$exp3_rep2_ref
geneCountTab_10$exp3_alt <- geneCountTab_10$exp3_rep1_alt + geneCountTab_10$exp3_rep2_alt
aiTable <- data.frame(aiTable)
aiTable$H8 <- as.numeric(aiTable$H8)
aiTable$s1.1 <- as.numeric(aiTable$s1.1)
aiTable$s4.11 <- as.numeric(aiTable$s4.11)
df <- merge(geneCountTab_10[,c(1,14:19)], aiTable, by.x="ensembl_gene_id", by.y="ensembl_gene_id")
# Find MAE genes
df <- df %>%
mutate(pval_sample1 = mapply(function(x, y) binom.test.p(c(x,y)), exp1_ref, exp1_alt)) %>%
mutate(pval_sample2 = mapply(function(x, y) binom.test.p(c(x,y)), exp2_ref, exp2_alt)) %>%
mutate(pval_sample3 = mapply(function(x, y) binom.test.p(c(x,y)), exp3_ref, exp3_alt)) %>%
mutate(pval_sample1_adj = p.adjust(pval_sample1, method="fdr")) %>%
mutate(pval_sample2_adj = p.adjust(pval_sample2, method="fdr")) %>%
mutate(pval_sample3_adj = p.adjust(pval_sample3, method="fdr")) %>%
mutate(isMAE_sample1 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample1, H8)) %>%
mutate(isMAE_sample2 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample2, s1.1)) %>%
mutate(isMAE_sample3 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample3, s4.11))
df <- df %>%
mutate(isMAE = mapply(function(x1,x2,x3) findMAE(c(x1,x2,x3)), isMAE_sample1, isMAE_sample2, isMAE_sample3))
library("tidyverse")
source("ASE_functions.R")
source("PerformDiffAIAnalysisFor2Conditions.R")
# Functions used
binom.test.p <- function(x) {
if (is.na(x[1])|is.na(x[2])|(x[1]+x[2])<10) {
return(NA)
}
else {
return(binom.test(x, alternative="two.sided")$p.value)
}
}
isMAE_test <- function(x, thr=0.85) {
if ((is.na(x[1]))|(is.na(x[2]))) {
return("nd")
}
else {
if ((x[1]<=0.05)&((x[2]>=thr))) {
return("129_monoallelic")
}
else if ((x[1]<=0.05)&((x[2]<=(1-thr)))) {
return("CAST_monoallelic")
}
else if ((x[1]<=0.05)&((x[2]>=0.5))) {
return("129_biased")
}
else if ((x[1]<=0.05)&((x[2]<0.5))) {
return("CAST_biased")
}
else {return("biallelic")}
}
}
findMAE <- function(x) {
mon <- 0
if (length(x)==1) {
mon=NA
}
else {
not_nm_count <- length(x) - sum(x=="nd")
if (not_nm_count==0) mon="nd"
else if ((sum(x=="CAST_monoallelic")+sum(x=="CAST_biased")==not_nm_count)|(sum(x=="129_monoallelic")+sum(x=="129_biased")==not_nm_count)) mon="gen_sk"
else if ((sum(x=="CAST_monoallelic")>0)|(sum(x=="129_monoallelic")>0)) mon="monoallelic"
else if ((sum(x=="CAST_biased")>0)|(sum(x=="129_biased")>0)) mon="biased"
else if (sum(x=="biallelic")==not_nm_count) mon="biallelic"
else mon="other"
}
return(mon)
}
experimentNames <- c("H8", "s1.1","s4.11")
techReps <- c(2,2,2)
designMatrix <- BuildDesign(experimentNames, techReps)
# Now we load we data and remove genes from X chromosome
inTabs <- "~/Dropbox (Partners HealthCare)/our_papers/5aza/data/ASE_results/5aza_add_processed_gene_extended2.txt"
removeX <- function(DF, legitim_chrgenes){
return(DF[DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
chrgenes <- read.delim('~/Dropbox (Partners HealthCare)/replicates_ASE/data/Mus_musculus.GRCm38.68.chrgenes.txt', col.names = c('chr', 'gene'))
geneCountTab <-removeX(GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F), chrgenes)
head(geneCountTab)
thr <- 10
geneCountTab_10 <- geneCountTab
nameColumns <- function(exp_n, rep_n)  {
paste0("exp", rep(exp_n, 2*rep_n), "_rep", rep(1:rep_n, each = 2), "_", rep(c("ref", "alt"), rep_n))
}
colnames(geneCountTab_10)[2:13] <- c(nameColumns(1,2), nameColumns(2,2), nameColumns(3,2))
geneCountTab_10 <- geneCountTab_10 %>% dplyr::filter(exp1_rep1_ref + exp1_rep1_alt >=thr & exp2_rep1_ref + exp2_rep1_alt >=thr &
exp3_rep1_ref + exp3_rep1_alt >=thr & exp1_rep2_ref + exp1_rep2_alt >=thr &
exp2_rep2_ref + exp2_rep2_alt >=thr & exp3_rep2_ref + exp3_rep2_alt >=thr)
aiTable <- do.call(cbind, lapply(1:length(designMatrix$techReps), function(x){
round(CountsToAI(geneCountTab_10, reps = unlist(designMatrix$replicateNums[x])),3)
}))
aiTable <- cbind(geneCountTab_10$ensembl_gene_id, aiTable)
colnames(aiTable) <- c("ensembl_gene_id", designMatrix$experimentNames)
geneCountTab_10$exp1_ref <- geneCountTab_10$exp1_rep1_ref + geneCountTab_10$exp1_rep2_ref
geneCountTab_10$exp1_alt <- geneCountTab_10$exp1_rep1_alt + geneCountTab_10$exp1_rep2_alt
geneCountTab_10$exp2_ref <- geneCountTab_10$exp2_rep1_ref + geneCountTab_10$exp2_rep2_ref
geneCountTab_10$exp2_alt <- geneCountTab_10$exp2_rep1_alt + geneCountTab_10$exp2_rep2_alt
geneCountTab_10$exp3_ref <- geneCountTab_10$exp3_rep1_ref + geneCountTab_10$exp3_rep2_ref
geneCountTab_10$exp3_alt <- geneCountTab_10$exp3_rep1_alt + geneCountTab_10$exp3_rep2_alt
aiTable <- data.frame(aiTable)
aiTable$H8 <- as.numeric(aiTable$H8)
aiTable$s1.1 <- as.numeric(aiTable$s1.1)
aiTable$s4.11 <- as.numeric(aiTable$s4.11)
df <- merge(geneCountTab_10[,c(1,14:19)], aiTable, by.x="ensembl_gene_id", by.y="ensembl_gene_id")
View(df)
df <- df %>%
mutate(pval_sample1 = mapply(function(x, y) binom.test.p(c(x,y)), exp1_ref, exp1_alt)) %>%
mutate(pval_sample2 = mapply(function(x, y) binom.test.p(c(x,y)), exp2_ref, exp2_alt)) %>%
mutate(pval_sample3 = mapply(function(x, y) binom.test.p(c(x,y)), exp3_ref, exp3_alt)) %>%
mutate(pval_sample1_adj = p.adjust(pval_sample1, method="fdr")) %>%
mutate(pval_sample2_adj = p.adjust(pval_sample2, method="fdr")) %>%
mutate(pval_sample3_adj = p.adjust(pval_sample3, method="fdr")) %>%
mutate(isMAE_sample1 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample1, H8)) %>%
mutate(isMAE_sample2 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample2, s1.1)) %>%
mutate(isMAE_sample3 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample3, s4.11))
df <- df %>%
mutate(isMAE = mapply(function(x1,x2,x3) findMAE(c(x1,x2,x3)), isMAE_sample1, isMAE_sample2, isMAE_sample3))
View(df)
df_ai_bi <- df %>% filter(isMAE %in% c("biallelic"))
df_ai_bi$diff <- df_ai_bi$medium - df_ai_bi$control
View(df_ai_bi)
experimentNames <- c("control","DMSO","low","medium","high")
techReps <- c(2,2,2,5,2)
designMatrix <- BuildDesign(experimentNames, techReps)
inTabs <- "../../../data/5aza/pr_20180714_ISEKI_processed_gene_extended2.txt"
geneCountTab <- GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F)
thr <- 10
geneCountTab_10 <- geneCountTab
nameColumns <- function(exp_n, rep_n)  {
paste0("exp", rep(exp_n, 2*rep_n), "_rep", rep(1:rep_n, each = 2), "_", rep(c("ref", "alt"), rep_n))
}
colnames(geneCountTab_10)[2:27] <- c(nameColumns(1,2), nameColumns(2,2), nameColumns(3,2), nameColumns(4,5), nameColumns(5,2))
geneCountTab_10 <- geneCountTab_10 %>% dplyr::filter(exp1_rep1_ref + exp1_rep1_alt >=thr & exp2_rep1_ref + exp2_rep1_alt >=thr &
exp3_rep1_ref + exp3_rep1_alt >=thr & exp4_rep1_ref + exp4_rep1_alt >=thr &
exp5_rep1_ref + exp5_rep1_alt >=thr & exp1_rep2_ref + exp1_rep2_alt >=thr &
exp2_rep2_ref + exp2_rep2_alt >=thr & exp3_rep2_ref + exp3_rep2_alt >=thr &
exp4_rep2_ref + exp4_rep2_alt >=thr & exp5_rep2_ref + exp5_rep2_alt >=thr)
aiTable <- do.call(cbind, lapply(1:length(designMatrix$techReps), function(x){
round(CountsToAI(geneCountTab_10, reps = unlist(designMatrix$replicateNums[x])),3)
}))
aiTable <- cbind(geneCountTab_10$ensembl_gene_id, aiTable)
colnames(aiTable) <- c("ensembl_gene_id", designMatrix$experimentNames)
View(aiTable)
aiTable <- data.frame(aiTable)
aiTable$control <- as.numeric(aiTable$control)
aiTable$DMSO <- as.numeric(aiTable$DMSO)
aiTable$low <- as.numeric(aiTable$low)
aiTable$medium <- as.numeric(aiTable$medium)
aiTable$high <- as.numeric(aiTable$high)
write.table(aiTable, file = "../../../data/5aza/ai_full.txt", row.names = F, quote = F, sep="\t")
library(readr)
ai_5aza <- read_delim("~/Dropbox (Partners HealthCare)/replicates_ASE/data/5aza/ai_full.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(ai_5aza)
experimentNames <- c("H8", "s1.1","s4.11")
techReps <- c(2,2,2)
designMatrix <- BuildDesign(experimentNames, techReps)
# Now we load we data and remove genes from X chromosome
inTabs <- "~/Dropbox (Partners HealthCare)/our_papers/5aza/data/ASE_results/5aza_add_processed_gene_extended2.txt"
removeX <- function(DF, legitim_chrgenes){
return(DF[DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
chrgenes <- read.delim('~/Dropbox (Partners HealthCare)/replicates_ASE/data/Mus_musculus.GRCm38.68.chrgenes.txt', col.names = c('chr', 'gene'))
geneCountTab <-removeX(GetGatkPipelineTabs(inTabs, designMatrix$techReps, multiple = F), chrgenes)
# Filter out genes with coverage lower than 10
thr <- 10
geneCountTab_10 <- geneCountTab
nameColumns <- function(exp_n, rep_n)  {
paste0("exp", rep(exp_n, 2*rep_n), "_rep", rep(1:rep_n, each = 2), "_", rep(c("ref", "alt"), rep_n))
}
colnames(geneCountTab_10)[2:13] <- c(nameColumns(1,2), nameColumns(2,2), nameColumns(3,2))
geneCountTab_10 <- geneCountTab_10 %>% dplyr::filter(exp1_rep1_ref + exp1_rep1_alt >=thr & exp2_rep1_ref + exp2_rep1_alt >=thr &
exp3_rep1_ref + exp3_rep1_alt >=thr & exp1_rep2_ref + exp1_rep2_alt >=thr &
exp2_rep2_ref + exp2_rep2_alt >=thr & exp3_rep2_ref + exp3_rep2_alt >=thr)
# Calculate AIs for replicates
aiTable <- do.call(cbind, lapply(1:length(designMatrix$techReps), function(x){
round(CountsToAI(geneCountTab_10, reps = unlist(designMatrix$replicateNums[x])),3)
}))
aiTable <- cbind(geneCountTab_10$ensembl_gene_id, aiTable)
colnames(aiTable) <- c("ensembl_gene_id", designMatrix$experimentNames)
# Calculate total counts and merge tables
geneCountTab_10$exp1_ref <- geneCountTab_10$exp1_rep1_ref + geneCountTab_10$exp1_rep2_ref
geneCountTab_10$exp1_alt <- geneCountTab_10$exp1_rep1_alt + geneCountTab_10$exp1_rep2_alt
geneCountTab_10$exp2_ref <- geneCountTab_10$exp2_rep1_ref + geneCountTab_10$exp2_rep2_ref
geneCountTab_10$exp2_alt <- geneCountTab_10$exp2_rep1_alt + geneCountTab_10$exp2_rep2_alt
geneCountTab_10$exp3_ref <- geneCountTab_10$exp3_rep1_ref + geneCountTab_10$exp3_rep2_ref
geneCountTab_10$exp3_alt <- geneCountTab_10$exp3_rep1_alt + geneCountTab_10$exp3_rep2_alt
aiTable <- data.frame(aiTable)
aiTable$H8 <- as.numeric(aiTable$H8)
aiTable$s1.1 <- as.numeric(aiTable$s1.1)
aiTable$s4.11 <- as.numeric(aiTable$s4.11)
df <- merge(geneCountTab_10[,c(1,14:19)], aiTable, by.x="ensembl_gene_id", by.y="ensembl_gene_id")
# Find MAE genes
df <- df %>%
mutate(pval_sample1 = mapply(function(x, y) binom.test.p(c(x,y)), exp1_ref, exp1_alt)) %>%
mutate(pval_sample2 = mapply(function(x, y) binom.test.p(c(x,y)), exp2_ref, exp2_alt)) %>%
mutate(pval_sample3 = mapply(function(x, y) binom.test.p(c(x,y)), exp3_ref, exp3_alt)) %>%
mutate(pval_sample1_adj = p.adjust(pval_sample1, method="fdr")) %>%
mutate(pval_sample2_adj = p.adjust(pval_sample2, method="fdr")) %>%
mutate(pval_sample3_adj = p.adjust(pval_sample3, method="fdr")) %>%
mutate(isMAE_sample1 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample1, H8)) %>%
mutate(isMAE_sample2 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample2, s1.1)) %>%
mutate(isMAE_sample3 = mapply(function(x, y) isMAE_test(c(x,y)), pval_sample3, s4.11))
df <- df %>%
mutate(isMAE = mapply(function(x1,x2,x3) findMAE(c(x1,x2,x3)), isMAE_sample1, isMAE_sample2, isMAE_sample3))
# Look at genes that don't change
ai_5aza <- read_delim("~/Dropbox (Partners HealthCare)/replicates_ASE/data/5aza/ai_full.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
df_full <- merge(df, ai_5aza, by.x="ensembl_gene_id", by.y="ensembl_gene_id")
df_full_bi <- df_full %>% filter(isMAE %in% c("biallelic"))
df_full$diff <- df_full$medium - df_full$control
View(df_full_bi)
df_full_bi$diff <- df_full_bi$medium - df_full_bi$control
View(df_full)
df_full_bi <- df_full_bi[,c(1,8:10,21:26)]
View(df_full_bi)
df_full_bi <- df_full %>% filter(isMAE %in% c("biallelic", "gen_sk"))
df_full_bi$diff <- df_full_bi$medium - df_full_bi$control
df_full_bi <- df_full_bi[,c(1,8:10,21:26)]
df_full_bi <- df_full %>% filter(isMAE %in% c("biallelic", "gen_sk"))
df_full_bi$diff <- df_full_bi$medium - df_full_bi$control
df_full_bi <- df_full_bi[,c(1,8:10,20,21:26)]
View(df_full_bi)
write.table(df_full_bi, file="biallelic_gen_sk_genes_changes_in_5aza.txt", row.names = F, quote = F)
