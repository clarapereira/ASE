2**res # вернулись от логарифма обратно
})
coeffDF <- data.frame(t(do.call(rbind, groupsIntercepts)))
colnames(coeffDF) <- paste0("q_", round(as.numeric(as.character(unique(DFQ$Q))),3))
coeffDF$exp <- rep(designMatrix$experimentNames, choose(designMatrix$techReps, 2))
coeffDF <- coeffDF[,c(dim(coeffDF)[2],1:(dim(coeffDF)[2]-1))]
DiffAI_DMSO_medium <- PerformDiffAIAnalysisFor2Conditions(geneCountTab,
vect1CondReps = unlist(designMatrix$replicateNums[2]),
vect2CondReps = unlist(designMatrix$replicateNums[4]),
Q=0.95,
thr=40)
DiffAI_DMSO_medium$deltaAI <- abs(DiffAI_DMSO_medium$meanAI1 - DiffAI_DMSO_medium$meanAI2)
head(DiffAI_DMSO_medium[, c(1,2,4,10,11)])
paste0("number of genes with differential AI ", table(DiffAI_DMSO_medium$diffAI)[2])
paste0("number of genes with no differential AI ", table(DiffAI_DMSO_medium$diffAI)[1])
minDifference <- 0.2
GenesAIDiff <- DiffAI_DMSO_medium[!is.na(DiffAI_DMSO_medium$diffAI), ]
GenesAIDiff <- GenesAIDiff[GenesAIDiff$diffAI==T & GenesAIDiff$deltaAI>=minDifference, ]
head(GenesAIDiff[, c(1,2,4,10,11)])
GenesAIDiff
DiffAI_DMSO_medium
GenesAIDiff
names(GenesAIDiff)
GenesAIDiff[ , c("ID", "meanAI1Low", "meanAI1High", "meanAI2Low", "meanAI2High", "deltaAI", "diffAI")]
GenesAIDiffAll = DiffAI_DMSO_medium[!is.na(DiffAI_DMSO_medium$diffAI) & DiffAI_DMSO_medium$diffAI, ]
GenesAIDiffAll[ , c("ID", "meanAI1Low", "meanAI1High", "meanAI2Low", "meanAI2High", "deltaAI", "diffAI")]
GenesAIDiffAllSub = GenesAIDiffAll[ , c("ID", "meanAI1Low", "meanAI1High", "meanAI2Low", "meanAI2High", "deltaAI", "diffAI")]
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI <= 0.01, ]
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI <= 0.02, ]
GenesAIDiffAllSub
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI >= 0.02, ]
GenesAIDiff
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI > 0.02, ]
minDifference <- 0.2
GenesAIDiff
DiffAI_DMSO_medium
!is.na(DiffAI_DMSO_medium$diffAI)
DiffAI_DMSO_medium[!is.na(DiffAI_DMSO_medium$diffAI), ]
GenesAIDiff <- DiffAI_DMSO_medium[!is.na(DiffAI_DMSO_medium$diffAI), ]
GenesAIDiff
GenesAIDiff <- GenesAIDiff[GenesAIDiff$diffAI==T & GenesAIDiff$deltaAI>=minDifference, ]
GenesAIDiff
minDifference <- 0.2
GenesAIDiff <- DiffAI_DMSO_medium[!is.na(DiffAI_DMSO_medium$diffAI), ]
GenesAIDiff <- GenesAIDiff[GenesAIDiff$diffAI==T & GenesAIDiff$deltaAI>=minDifference, ]
GenesAIDiff
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI > 0.2, ]
GenesAIDiffAll
CreateCIforAI <- function(dfInt, dfCounts, thr=NA){
#' Input: two data frames, one including replicate-gene mat|pat coverages, one with constants for each technical replicates pair
#'
#' @param dfInt A table with column "linInt" of correction constants for each replicates combination (rows), the order of rows should be consistent with columns in dfCounts, s.t. pairs are alphabetically ordered
#' @param dfAI A table with columns for each technical replicate, the rows correspond to genes, the values are AI
#' @param dfCounts A table with pairs of columns for each technical replicate, the rows correspond to genes, the values are mat|pat coverages
#' @return 5-column df: ID, AI, Plus-minus intervals, AI Confidence Intervals left and right ends
#' @examples
#'
dfAI  <- sapply(1:(ncol(dfCounts)%/%2), function(i){
CountsToAI(dfCounts, reps=i, thr=thr)
})
dfCov <- sapply(1:(ncol(dfCounts)%/%2), function(i){
dfCounts[, (2*i)] + dfCounts[, (2*i+1)]
})
df <- data.frame(
ID      = dfCounts[,1],
meanCov = rowMeans(dfCov),
meanAI  = CountsToAI(dfCounts, meth="meanOfProportions", thr=thr),
pm      = CreatePMforAI(dfInt, dfAI, dfCov)
)
df$meanAILow  <- sapply(df$meanAI-df$pm, function(x){max(0, x)})
df$meanAIHigh <- sapply(df$meanAI+df$pm, function(x){min(1, x)})
return(df)
}
DiffAI_DMSO_medium <- PerformDiffAIAnalysisFor2Conditions(geneCountTab,
vect1CondReps = unlist(designMatrix$replicateNums[2]),
vect2CondReps = unlist(designMatrix$replicateNums[4]),
Q=0.95,
thr=40)
DiffAI_DMSO_medium$deltaAI <- abs(DiffAI_DMSO_medium$meanAI1 - DiffAI_DMSO_medium$meanAI2)
DiffAI_DMSO_medium
PerformDiffAIAnalysisFor2Conditions <- function(inDF, vect1CondReps, vect2CondReps, cond1Name="Condition1", cond2Name="Condition2", Q=0.95, thr=NA, fullOUT=F){
#' Input: data frame with gene names and counts (reference and alternative) + numbers of replicates to use for each condition
#'
#' @param inDF A table with ref & alt counts per gene/SNP for each replicate plus the first column with gene/SNP names
#' @param vect1CondReps A vector (>=2) of replicate numbers that should be considered as first condition's tech reps
#' @param vect2CondReps A vector (>=2) of replicate numbers that should be considered as second condition's tech reps
#' @param cond1Name An optional parameter; one-word name for condition 1
#' @param cond2Name An optional parameter; one-word name for condition 2
#' @param Q An optional parameter; %-quantile (for example 0.95, 0.8, etc)
#' @param thr An optional parameter; threshold on the overall number of counts (in all replicates combined) for a gene to be considered
#' @return A table of gene names, AIs + CIs for each condition, classification into genes demonstrating differential AI and those that don't
#' @examples
#'
# Take subtables for 1 and 2 conditions:
dfCondition <- list(cond1 = inDF[, sort(c(1, vect1CondReps*2, vect1CondReps*2+1))],
cond2 = inDF[, sort(c(1, vect2CondReps*2, vect2CondReps*2+1))])
# Create pairvise AI differences for all techreps pairs:
deltaAIPairwiseDF <- rbind(CreateMergedDeltaAIPairwiseDF(dfCondition$cond1, what=cond1Name, thr=thr),
CreateMergedDeltaAIPairwiseDF(dfCondition$cond2, what=cond2Name, thr=thr))
deltaAIPairwiseDF$group <- paste(deltaAIPairwiseDF$what, deltaAIPairwiseDF$ij)
# Count quartiles for Mean Coverage bins
observedQuartilesDF <- do.call(rbind,
lapply(unique(deltaAIPairwiseDF$group),
function(gr){
df  <- deltaAIPairwiseDF[deltaAIPairwiseDF$group == gr, ]
res <- CreateObservedQuantilesDF(df,
P=Q, ep=1.3, logbase=T,
coverageLimit=quantile(deltaAIPairwiseDF$MeanCov, 0.995),
group=gr)
}
)
)
observedQuartilesDF$condition <- sapply(as.character(observedQuartilesDF$group),
function(x){unlist(strsplit(x, ' '))[1]})
observedQuartilesDF$ij <- sapply(as.character(observedQuartilesDF$group),
function(x){paste(unlist(strsplit(x, ' '))[2:4], collapse=' ')})
# Count intercepts:
linIntercepts <- lapply(unique(observedQuartilesDF$condition),
function(cond){
df <- observedQuartilesDF[observedQuartilesDF$condition == cond, ] # кондишны
res <- sapply(unique(df$ij), function(x){ # проход по всем парам
FitLmIntercept(df[df$ij == x, ], binNObs=30, morethan=10, logoutput=F)
})
data.frame(condition = cond, ij = unique(df$ij),
linInt = as.double(res))
})
names(linIntercepts) <- unique(observedQuartilesDF$condition)
# -------------------------------------------------------------------------------------
# Concerns: Meancoverage is not accurate measure.
#           Overdispersion itself should be enough, in case of 5aza
#           it's even worse because the different level of coverage.
# -------------------------------------------------------------------------------------
# Calculate AI CIs:
QCI <- data.frame(ID = inDF[, 1],
CreateCIforAI(linIntercepts[[cond1Name]], dfCondition$cond1, thr=thr)[, -1],
CreateCIforAI(linIntercepts[[cond2Name]], dfCondition$cond2, thr=thr)[, -1]
)
names(QCI) = c("ID",
"meanCov1", "meanAI1", "pm1", "meanAI1Low", "meanAI1High",
"meanCov2", "meanAI2", "pm2", "meanAI2Low", "meanAI2High")
# Find intersecting intervals > call them FALSE
QCI$diffAI <- !(QCI$meanAI1Low < QCI$meanAI2Low & QCI$meanAI1High >= QCI$meanAI2Low |
QCI$meanAI1Low >= QCI$meanAI2Low & QCI$meanAI1Low <= QCI$meanAI2High)
if (!fullOUT){
return(QCI)
} else {
return(list(deltaAIPairwise = deltaAIPairwiseDF,
observedQuartiles = observedQuartilesDF,
intercepts = linIntercepts,
AICI = QCI))
}
}
DiffAI_DMSO_medium <- PerformDiffAIAnalysisFor2Conditions(geneCountTab,
vect1CondReps = unlist(designMatrix$replicateNums[2]),
vect2CondReps = unlist(designMatrix$replicateNums[4]),
Q=0.95,
thr=40)
DiffAI_DMSO_medium$deltaAI <- abs(DiffAI_DMSO_medium$meanAI1 - DiffAI_DMSO_medium$meanAI2)
DiffAI_DMSO_medium
2
head(DiffAI_DMSO_medium[, c(1,2,4,10,11)])
head(DiffAI_DMSO_medium[, c(1,3,4,10,11)])
head(DiffAI_DMSO_medium[, c(1,5,4,10,11)])
head(DiffAI_DMSO_medium[, c(1,5,6,10,11)])
minDifference <- 0.2
GenesAIDiff <- DiffAI_DMSO_medium[!is.na(DiffAI_DMSO_medium$diffAI), ]
GenesAIDiff <- GenesAIDiff[GenesAIDiff$diffAI==T & GenesAIDiff$deltaAI>=minDifference, ]
head(GenesAIDiff[, c(1,2,4,10,11)])
head(GenesAIDiff[, c(1,5,6,10,11)])
GenesAIDiffAll = DiffAI_DMSO_medium[!is.na(DiffAI_DMSO_medium$diffAI) & DiffAI_DMSO_medium$diffAI, ]
GenesAIDiffAllSub = GenesAIDiffAll[ , c("ID", "meanAI1Low", "meanAI1High", "meanAI2Low", "meanAI2High", "deltaAI", "diffAI")]
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI > 0.2, ]
GenesAIDiffAllSub = GenesAIDiffAll[ , c("ID", "meanCov1", "meanAI1Low", "meanAI1High", "meanCov2", "meanAI2Low", "meanAI2High", "deltaAI")]
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI > 0.2, ]
DFplot = GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI > 0.2, ]
DFplot$meanCov = DFplot$meanCov1 + DFplot$meanCov2
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI > 0.2, ]
DFplot = GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI > 0.2, ]
DFplot
ggplot(DF, aes(meanCov1, meanCov2)) +
geom_point(aes(color=deltaAI))
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(aes(color=deltaAI))
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000))
GenesAIDiffAllSub
GenesAIDiffAll
DFplot = GenesAIDiffAll[GenesAIDiffAll$deltaAI > 0.2, ]
GenesAIDiffAllSub
GenesAIDiffAllSub = GenesAIDiffAll[ , c("ID", "meanCov1", "meanAI1Low", "meanAI1High", "meanCov2", "meanAI2Low", "meanAI2High", "deltaAI")]
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI > 0.2, ]
5%/%2
GenesAIDiffAll = DiffAI_DMSO_medium[!is.na(DiffAI_DMSO_medium$diffAI) & DiffAI_DMSO_medium$diffAI, ]
GenesAIDiffAllSub = GenesAIDiffAll[ , c("ID", "meanCov1", "meanAI1Low", "meanAI1High", "meanCov2", "meanAI2Low", "meanAI2High", "deltaAI")]
GenesAIDiffAllSub[GenesAIDiffAllSub$deltaAI > 0.2, ]
DFplot = GenesAIDiffAll
DFplot$meanAI1bin = DFplot$meanAI1*100 %/% 10
DFplot$meanAI2bin = DFplot$meanAI2*100 %/% 10
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000))
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(~ meanAI1bin)
DFplot
as.integer(DFplot$meanAI1*100)
as.integer(DFplot$meanAI1*100) %/% 10
DFplot = GenesAIDiffAll
DFplot$meanAI1bin = as.integer(DFplot$meanAI1*100) %/% 10
DFplot$meanAI2bin = DFplot$meanAI2*100 %/% 10
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(~ meanAI1bin)
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(aes(size=0.5, color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(~ meanAI1bin)
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(aes(size=0.1, color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(~ meanAI1bin)
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(size=0.1, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(~ meanAI1bin)
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(~ meanAI1bin)
DFplot$deltaAIbin = as.integer(DFplot$deltaAIbin*100) %/% 10
DFplot$deltaAIbin = as.integer(DFplot$deltaAI*100) %/% 10
DFplot$deltaAIbin = as.integer(DFplot$deltaAI*100) %/% 5
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(deltaAIbin ~ meanAI1bin)
DFplot$deltaAIbin = as.integer(DFplot$deltaAI*100) %/% 10
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(deltaAIbin ~ meanAI1bin)
DFplot = GenesAIDiffAll
DFplot$deltaAIbin = as.integer(DFplot$deltaAI*100) %/% 5
DFplot$meanAI1bin = as.integer(DFplot$meanAI1*100) %/% 10
DFplot$meanAI2bin = as.integer(DFplot$meanAI2*100) %/% 10
ggplot(DFplot[DFplot$deltaAI<20, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(deltaAIbin ~ meanAI1bin)
DFplot = GenesAIDiffAll
DFplot$deltaAIbin = as.integer(DFplot$deltaAI*100) %/% 5
DFplot$meanAI1bin = as.integer(DFplot$meanAI1*100) %/% 10
DFplot$meanAI2bin = as.integer(DFplot$meanAI2*100) %/% 10
DFplot$deltaAIbin
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(deltaAIbin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
DFplot = GenesAIDiffAll
DFplot$deltaAIbin = as.integer(DFplot$deltaAI*100) %/% 5 /10
DFplot$meanAI1bin = as.integer(DFplot$meanAI1*100) %/% 10 /10
DFplot$meanAI2bin = as.integer(DFplot$meanAI2*100) %/% 10 /10
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
DFplot = GenesAIDiffAll
DFplot$deltaAIbin = paste("deltaAIbin", as.integer(DFplot$deltaAI*100) %/% 5 /10)
DFplot$meanAI1bin = paste("meanAI1bin", as.integer(DFplot$meanAI1*100) %/% 10 /10)
DFplot$meanAI2bin = paste("meanAI2bin", as.integer(DFplot$meanAI2*100) %/% 10 /10)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
DFplot = GenesAIDiffAll
DFplot$deltaAIbin = paste("deltaAIbin", as.integer(DFplot$deltaAI*100) %/% 5 /20)
DFplot$meanAI1bin = paste("meanAI1bin", as.integer(DFplot$meanAI1*100) %/% 5 /20)
DFplot$meanAI2bin = paste("meanAI2bin", as.integer(DFplot$meanAI2*100) %/% 5 /20)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
pdf('~/Documents/AI/5aza_AIcorridors.pdf',height=20, width=22)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
dev.off()
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
pdf('~/Documents/AI/5aza_AIdiffbins.pdf',height=20, width=22)
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
dev.off()
DiffAI_DMSO_medium
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# EXAMPLE TEST:
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
removeX <- function(DF, legitim_chrgenes){
return(DF[DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
chrgenes = read.delim('../../../data/Mus_musculus.GRCm38.68.chrgenes.txt', col.names = c('chr', 'gene'))
inTabs = paste0("../../../data/full/",
c("NEB", "SMARTseq10ng", "SMARTseq100pg"),
"_processed_gene_extended2.txt")
inTab = "../../../data/5aza/pr_20180714_ISEKI_processed_gene_extended2.txt"
inDF18 = removeX(GetGatkPipelineTabs(inTabs, c(6,6,6)), chrgenes)
RESULT18 = PerformDiffAIAnalysisFor2Conditions(inDF18, vect1CondReps=2:3, vect2CondReps=7:9, Q=0.95)
getwd()
setwd('/home/asya/Documents/AI/code/ASE/R')
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# EXAMPLE TEST:
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
removeX <- function(DF, legitim_chrgenes){
return(DF[DF$ensembl_gene_id %in% legitim_chrgenes$gene, ])
}
chrgenes = read.delim('../../../data/Mus_musculus.GRCm38.68.chrgenes.txt', col.names = c('chr', 'gene'))
inTabs = paste0("../../../data/full/",
c("NEB", "SMARTseq10ng", "SMARTseq100pg"),
"_processed_gene_extended2.txt")
inDF18 = removeX(GetGatkPipelineTabs(inTabs, c(6,6,6)), chrgenes)
RESULT18 = PerformDiffAIAnalysisFor2Conditions(inDF18, vect1CondReps=2:3, vect2CondReps=7:9, Q=0.95)
RESULT18
DiffAI_DMSO_medium
RESULT18
RESULT18_GenesAIDiffAll = RESULT18[!is.na(RESULT18$diffAI) & RESULT18$diffAI, ]
DFplot = RESULT18[!is.na(RESULT18$diffAI) & RESULT18$diffAI, ]
DFplot$deltaAIbin = paste("deltaAIbin", as.integer(DFplot$deltaAI*100) %/% 5 /20)
DFplot$meanAI1bin = paste("meanAI1bin", as.integer(DFplot$meanAI1*100) %/% 5 /20)
DFplot$meanAI2bin = paste("meanAI2bin", as.integer(DFplot$meanAI2*100) %/% 5 /20)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
DFplot
DFplot = RESULT18[!is.na(RESULT18$diffAI) & RESULT18$diffAI, ]
DFplot$deltaAIbin = paste("deltaAIbin", as.integer(DFplot$deltaAI*100) %/% 5 /20)
DFplot$meanAI1bin = paste("meanAI1bin", as.integer(DFplot$meanAI1*100) %/% 5 /20)
DFplot$meanAI2bin = paste("meanAI2bin", as.integer(DFplot$meanAI2*100) %/% 5 /20)
DFplot
#pdf('~/Documents/AI/5aza_AIdiffbins.pdf',height=20, width=22)
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
DFplot
DFplot$deltaAI <- abs(DFplot$meanAI1 - DFplot$meanAI2)
DFplot$deltaAIbin = paste("deltaAIbin", as.integer(DFplot$deltaAI*100) %/% 5 /20)
DFplot$meanAI1bin = paste("meanAI1bin", as.integer(DFplot$meanAI1*100) %/% 5 /20)
DFplot$meanAI2bin = paste("meanAI2bin", as.integer(DFplot$meanAI2*100) %/% 5 /20)
#pdf('~/Documents/AI/5aza_AIcorridors.pdf',height=20, width=22)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
pdf('~/Documents/AI/NebSmart10ng_AIcorridors.pdf',height=20, width=22)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI>0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
dev.off()
pdf('~/Documents/AI/NebSmart10ng_AIdiffbins.pdf',height=20, width=22)
ggplot(DFplot, aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.2, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.1, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
ggplot(DFplot[DFplot$deltaAI<0.05, ], aes(meanCov1, meanCov2)) +
geom_point(size=0.5, aes(color=deltaAI)) +
lims(x = c(0, 1000), y = c(0, 1000)) +
facet_grid(meanAI2bin ~ meanAI1bin)
dev.off()
